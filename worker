
os.loadAPI("consts")
os.loadAPI("packets")
os.loadAPI("generalUtils")

MODEM_SIDE = "top"

running = true
current_task = nil
current_state = consts.getFreeConst()

GET_ITEM_TASK = 'getItem'
SCAN_TASK = 'scanNow'

function stopWorker(reason)
    generalUtils.log("stopping worker, reason: " .. reason, false)
    generalUtils.closeModem(MODEM_SIDE)
    rednet.unhost(consts.getProtocolName(), consts.getWorkerHostname())
    os.sleep = sleepOld
    running = false
end

function getCommand()
    local timeout = os.startTimer(0)
    local event = {os.pullEventRaw()}
    if event[1] == "terminate" then
        stopWorker("User interaction")
        return
    elseif event[1] == "timer" and event[2] == timeout then -- check if the event is for the timeout of the event checking
        return
    elseif event[1] == 'rednet_message' then
        if type(event[3]) == 'table' and event[3]['sType'] == 'lookup' then
            return
        end
        handleNewMessage(event[2], event[3])
    elseif event[1] == 'modem_message' then
        -- Do nothing for now, rednet has it covered
    elseif event[1] == 'key' then
        return
    end
    return event[1], event[2] -- for sleep functionality
end

function sendAck(senderId, messageId)
    generalUtils.log("Ack sent to manager id: " .. senderId .. " message ID: " .. messageId, false)
    rednet.send(senderId, string.format(packet.getGenericAck(), messageId), consts.getProtocolName())
end

function sendState(senderId, messageId)
    local sendingMessage = consts.getUnknownState()
    if current_state == consts.getFreeConst() then
        sendingMessage = string.format(packets.getTurtleFreeStateResponse(), messageId)
    elseif current_state == consts.getBusyConst() then
        sendingMessage = string.format(packets.getTurtleBusyStateResponse(), messageId)
    end
    generalUtils.log("sending state to: " .. senderId .. " with message: " .. sendingMessage, false)
    rednet.send(senderId, sendingMessage, consts.getProtocolName())
end

function handleNewMessage(senderId, message)
    if senderId == nil and message == nil then
        return
    end
    generalUtils.log("got message from id: " .. senderId .. " message: " .. message, false)
    messageId = tonumber(string.match(message, "(%S+)"))
    if messageId == nil then
        -- TODO - ack from manager
        return
    end
    message = string.match(message, "%s+(.*)")
    command = string.match(message, "(%S+)")
    if command == packets.getItem() then
        current_task = {GET_ITEM_TASK, tonumber(string.match(string.match(message, "(%w+)%s*$"), "(%w+)%s*$")), tonumber(string.match(message, "(%w+)%s*$"))}
        sendAck(senderId, messageId)
    elseif command == packets.getScan() then
        current_task = {SCAN_TASK}
        sendAck(senderId, messageId)
    elseif command == packets.getState() then
        sendState(senderId, messageId)
    end
end

function doAction()
    -- call the movements from the WIP API (maybe movement/storage)
end

generalUtils.log("-------- STARTING WORKER --------")

generalUtils.log("setting sleep to custom sleep function", false)
sleepOld = os.sleep
os.sleep = function( _nTime )
    local timer = os.startTimer( _nTime )
  
    repeat
        local eventType, param = getCommand()
    until param == timer and eventType == 'timer'
end

generalUtils.openModem(MODEM_SIDE)
rednet.host(consts.getProtocolName(), consts.getWorkerHostname())

while running do
    getCommand()
    if running == false then
        break -- Running state might change at getCommand() call, we don't want to execute another action
    end
    doAction()
    os.sleep(1)
end